{"version":3,"sources":["img/pofile_pic.jpg","Header.js","Firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","SwipeButtons","Chat","message","timestamp","profilePic","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefault","Profile","Profilepic","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.de41cd3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pofile_pic.e680277b.jpg\";","import React from 'react';\r\nimport './Header.css';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport { Link, useHistory} from 'react-router-dom';\r\n\r\nfunction Header({backButton}) {\r\n\r\n    const history = useHistory();\r\n\r\n    return(\r\n        <div className=\"header\">\r\n\r\n            {backButton ? (\r\n                <IconButton onClick={() => history.replace(backButton)}>\r\n                   <ArrowBackIosIcon fontSize=\"large\" className=\"header__iconBack\"/> \r\n                </IconButton>\r\n                \r\n            ):(\r\n                <Link to=\"/profile\">\r\n                <IconButton>\r\n                    <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n                </Link>\r\n            )}\r\n\r\n\r\n            <Link to=\"/\">\r\n                <img  className=\"header__logo\" src=\"https://w7.pngwing.com/pngs/698/493/png-transparent-tinder-hd-logo-thumbnail.png\" alt=\"tinder logo\" />\r\n            </Link>\r\n\r\n            <Link to='/chat'>\r\n                <IconButton>            \r\n                    <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            </Link>\r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Header;","import * as firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAgtcTqLxnoNUXcZRq310nXczpQmS2vKMU\",\r\n  authDomain: \"tinder-clone-251fb.firebaseapp.com\",\r\n  databaseURL: \"https://tinder-clone-251fb.firebaseio.com\",\r\n  projectId: \"tinder-clone-251fb\",\r\n  storageBucket: \"tinder-clone-251fb.appspot.com\",\r\n  messagingSenderId: \"573588828637\",\r\n  appId: \"1:573588828637:web:1b8ccfe6a18a160d6a0634\",\r\n  measurementId: \"G-2XQE5YL7L6\"\r\n};\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\nexport default database;\r\n","import React, { useState, useEffect } from 'react';\r\nimport TinderCard from 'react-tinder-card';\r\nimport database from './Firebase.js';\r\nimport './TinderCards.css';\r\n\r\nfunction TinderCards() {\r\n\r\n    const [people, setPeople] = useState([]);\r\n\r\n    //piece of code wich runs based on a condition \r\n\r\n    useEffect(() => {\r\n        //this is where the code runs\r\n       const unsubscribe = database.collection('people').onSnapshot((snapshot) => \r\n           setPeople(snapshot.docs.map((doc) => doc.data()))//returns name and url from de data collection in firebase\r\n       );\r\n\r\n        return() => {\r\n            unsubscribe();\r\n        };\r\n    }, [])\r\n\r\n\r\n    //const people = [];\r\n    // people.push('abc','def')\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"tinderCards_cardContainer\">\r\n                {people.map(person => (\r\n                    <TinderCard\r\n                    className='swipe'\r\n                    key={person.name}\r\n                    preventSwipe={['up', 'down']}>\r\n\r\n                        <div style={{ backgroundImage: `url(${person.url})`}} \r\n                        className='card'>\r\n                            <h3>{person.name}</h3>\r\n                        </div>\r\n\r\n                    </TinderCard>\r\n                ))}\r\n            </div>          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react';\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport './SwipeButtons.css';\r\n\r\n const SwipeButtons = () => {\r\n    return (\r\n        <div className=\"swipeButtons\">\r\n            <IconButton className=\"swipeButtons__repeat\">\r\n                <ReplayIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n\r\n            <IconButton className=\"swipeButtons__left\">\r\n                <CloseIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            \r\n            <IconButton className=\"swipeButtons__star\">\r\n                <StarRateIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n\r\n            <IconButton className=\"swipeButtons__right\">\r\n                <FavoriteIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n\r\n            <IconButton className=\"swipeButtons__lightning\">\r\n                <FlashOnIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons;","import React from 'react';\r\nimport './Chat.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Chat({name, message, timestamp, profilePic}) {\r\n    return (\r\n        <Link to={`/chat/${name}`}>\r\n\r\n        <div className='chat'>\r\n            <Avatar className='chat__image' src={profilePic} />\r\n            <div className='chat__details'>\r\n                <h2>{name}</h2>\r\n                <p>{message}</p>\r\n            </div>\r\n            <p className='chat__timestamp'>{timestamp}</p>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport './Chats.css'\r\n\r\nimport Chat from './Chat.js'\r\n\r\n\r\nfunction Chats() {\r\n    return (\r\n\r\n        <div className=\"chats\">\r\n            <Chat \r\n            name=\"Harry\"\r\n            message=\"Hi! How are you 🙂\"\r\n            timestamp='4 seconds ago'\r\n            profilePic='https://aws.revistavanityfair.es/prod/designs/v1/assets/2189x1809/172094.jpg'\r\n            />\r\n\r\n            <Chat \r\n            name=\"Kim Tae-Hyung\"\r\n            message=\"Hi! 💛 \"\r\n            timestamp='3 hours ago'\r\n            profilePic='https://www.soundpark.news/__export/1672336968320/sites/debate/img/2022/12/29/v-bts_x3x_x1x.jpg_1758632412.jpg'\r\n            />\r\n\r\n            <Chat \r\n            name=\"Tyler Barnhardt \"\r\n            message=\"What's up ❤ ? \"\r\n            timestamp='1 day ago'\r\n            profilePic='https://theimagista.com/wp-content/uploads/2019/09/Nolwen_Cifuentes_Tyler_Barnhardt_Imagista08-e1568376103460.jpg'\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats;\r\n","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport './ChatScreen.css';\r\n\r\nfunction ChatScreen() {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages]= useState([\r\n        {\r\n            name:'Harry',\r\n            image:\r\n                'https://aws.revistavanityfair.es/prod/designs/v1/assets/2189x1809/172094.jpg',\r\n            message:'Hi! How are you 🙂',\r\n        },\r\n        {\r\n            name:'Harry',\r\n            image:\r\n                'https://aws.revistavanityfair.es/prod/designs/v1/assets/2189x1809/172094.jpg',\r\n            message:'What are you doing?',\r\n        },\r\n        {\r\n            message:'Whats up ❤ ?',\r\n        },\r\n    ]);\r\n\r\n\r\n    const handleSend = e => {\r\n        e.preventDefault();\r\n\r\n        setMessages([...messages,{ message: input}])\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatScreen\">\r\n            <p className=\"chatScreen__timestamp\">\r\n                You matched with Harry on 10/08/20\r\n            </p>\r\n\r\n            {messages.map((message) => (\r\n                message.name ? (                \r\n                    <div className=\"chatScreen__message\">\r\n                        <Avatar\r\n                        className=\"chatScreen__image\"\r\n                        alt={message.name}\r\n                        src={message.image}\r\n                        />\r\n                        <p className='chatScreen__text'>{message.message}</p>\r\n                    </div>\r\n                    ) : (\r\n                        <div className=\"chatScreen__message\">\r\n                        <p className='chatScreen__textUser'>{message.message}</p>\r\n                        </div>\r\n                    )\r\n                \r\n            ))}\r\n            \r\n                <form className='chatScreen__input'>\r\n                    <input value={input} \r\n                    onChange={e => setInput(e.target.value)}\r\n                    className='chatScreen__inputField' \r\n                    placeholder=\"Type a message...\"\r\n                    type=\"text\" />\r\n                    <button onClick={handleSend} type='submit' className='chatScreen__inputButton'>SEND</button>\r\n                </form>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ChatScreen;\r\n","import React from 'react';\r\nimport './Profile.css';\r\nimport Profilepic from './img/pofile_pic.jpg';\r\n\r\n\r\nfunction Profile() {\r\n    return (\r\n        <div className=\"profile__data\">\r\n            <img className='profile__pic' src={Profilepic} alt=\"Profile_pic\" />\r\n            <h2>Jen, 25</h2>\r\n            \r\n            <h3>All happy girls are alike; every unhappy girl is unhappy in her own way. My kind of unhappy is full of self-deprecating humor, double IPAs, and is actually pretty rad.\r\n                <br></br>\r\n                <br></br>\r\n                Let me know if you want to be miserable together.</h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport TinderCards from './TinderCards';\r\nimport SwipeButtons from './SwipeButtons.js';\r\nimport Chats from './Chats.js';\r\nimport ChatScreen from './ChatScreen.js';\r\nimport Profile from './Profile.js';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Router>\r\n        <Switch>\r\n\r\n        <Route path=\"/profile\">\r\n          <Header backButton='/' />\r\n          <Profile />\r\n        </Route>\r\n\r\n        <Route path=\"/chat/:person\">\r\n            <Header backButton='/chat' />\r\n            <ChatScreen />\r\n          </Route>\r\n\r\n          <Route path=\"/chat\">\r\n            <Header backButton='/' />\r\n            <Chats />\r\n          </Route>\r\n\r\n          <Route path=\"/\">\r\n            <Header />\r\n            <TinderCards />\r\n            <SwipeButtons />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </Router>\r\n\r\n    {/* tinder cards */}\r\n          {/* buttons below tinder cards*/}\r\n          {/* chat screen */}\r\n          {/* individual chat screen*/}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}